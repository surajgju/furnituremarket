{"version":3,"sources":["RCTAsyncStorage.expo.js"],"names":["NativeModules","TurboModuleRegistry","require","RCTAsyncStorage","get","AsyncSQLiteDBStorage","AsyncLocalStorage"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AAACA,EAAAA,aAAD;AAAgBC,EAAAA;AAAhB,IAAuCC,OAAO,CAAC,cAAD,CAApD;;AAEA,IAAIC,eAAJ,C,CAEA;AACA;AACA;AACA;;AACA,IAAIF,mBAAJ,EAAyB;AACvBE,EAAAA,eAAe,GAAGF,mBAAmB,CAACG,GAApB,CAAwB,sBAAxB,KAAmDH,mBAAmB,CAACG,GAApB,CAAwB,mBAAxB,CAArE;AACD,CAFD,MAEO;AACLD,EAAAA,eAAe,GAAGH,aAAa,CAACK,oBAAd,IAAsCL,aAAa,CAACM,iBAAtE;AACD;;AAED,eAAeH,eAAf","sourcesContent":["/**\r\n * Expo managed apps don't include the @react-native-async-storage/async-storage\r\n * native modules yet, but the API interface is the same, so we can use the version\r\n * exported from React Native still.\r\n *\r\n * If in future releases (eg: @react-native-async-storage/async-storage >= 2.0.0) this\r\n * will likely not be valid anymore, and the package will need to be included in the Expo SDK\r\n * to continue to work.\r\n */\r\nconst {NativeModules, TurboModuleRegistry} = require('react-native');\r\n\r\nlet RCTAsyncStorage;\r\n\r\n// TurboModuleRegistry falls back to NativeModules\r\n// so we don't have to try go assign NativeModules'\r\n// counterparts if TurboModuleRegistry would resolve\r\n// with undefined.\r\nif (TurboModuleRegistry) {\r\n  RCTAsyncStorage = TurboModuleRegistry.get('AsyncSQLiteDBStorage') || TurboModuleRegistry.get('AsyncLocalStorage');\r\n} else {\r\n  RCTAsyncStorage = NativeModules.AsyncSQLiteDBStorage || NativeModules.AsyncLocalStorage;\r\n}\r\n\r\nexport default RCTAsyncStorage;\r\n"]}